/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*   This is a stylesheet defining helpful styles for a responsive
*   user experience.
*
*   Written by Cody M Leff <cody@leftgoat.com>
*
*/

/*
*   Breakpoints
*   -----------
*
*   Extra Large: 1200px and above;
*   Large: 900px to 1199px
*   Medium: 600px to 899px
*   Small: 599px and below
*/



/*
*   Whole page styles
*/

html {
    min-width: 320px;
    min-height: 320px;
}

*, *::before, *::after {
    box-sizing: border-box;
}


/*
*   Breakpoints: each key/value pair defines a size and its minimum
*   width.
*/
$breakpoints: (small: 0px, medium: 600px, large: 900px, xlarge: 1200px);


/*
*   Media query mixins.  Each size overrides the styles for that
*   size and all larger ones.
*/

@mixin small {
    @media (min-width: map-get($breakpoints, small)) {
        @content;
    }
}

@mixin medium {
    @media (min-width: map-get($breakpoints, medium)) {
        @content;
    }
}

@mixin large {
    @media (min-width: map-get($breakpoints, large)) {
        @content;
    }
}

@mixin xlarge {
    @media (min-width: map-get($breakpoints, xlarge)) {
        @content;
    }
}


/*
*   Full-width container mixin: this makes sure that all containers
*   get the same variable padding.  Apply to vertical spans of the
*   page and anything else that will be a full-width block.
*/

@mixin container {
    
    width: 100%;
    clear: both;
    overflow: auto;

    @include small { padding: 50px 25px; }
    @include medium { padding: 50px 50px; }
    @include large { padding: 100px 50px; }

    /*  side padding: 25px + (100% - 1100px) / 2  */
    @include xlarge { padding: 100px calc(50vw - 550px); }

}


/*
*   Columns mixins
*   --------------
*   These mixins define a column-based grid system for easy positioning.
*   They're given a specific width and floated to the left, and
*   moved using relative positioning.  Width sizes should add up
*   to the number of columns.  These mixins depend on mobile-up
*   styling, so defining a position or width for 'small' will apply
*   to all sizes unless overridden with specific positions or widths
*   for larger sizes.
*/

//  Number of columns
$n_columns: 12;

//  This mixin positions a block at a certain column position.
@mixin position($size, $left) {
    
    @media (min-width: map-get($breakpoints, $size)) {
        position: relative;
        float: left;
        left: (100% / $n_columns) * $left;
        width: (100% / $n_columns) * ($n_columns - $left);
    }

}

//  This mixin sizes a block to be the given number of columns wide.
@mixin width($size, $width) {
    
    @media (min-width: map-get($breakpoints, $size)) {
        width: (100% / $n_columns) * ($width);
    }

}

//  This mixin unsets width and position.
@mixin no-position($size) {

    @media (min-width: map-get($breakpoints, $size)) {
        position: static;
        float: none;
        left: 0;
        width: auto;
    }

}
